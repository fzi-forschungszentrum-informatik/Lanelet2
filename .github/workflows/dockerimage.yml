name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
    tags:
      - '**'
  # Run tests for any PRs.
  pull_request:
env:
  IMAGE_NAME: lanelet2
  IMAGE: docker.pkg.github.com/${{ github.repository }}/lanelet2

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        
      - name: Pull old image
        continue-on-error: true
        run: docker pull $IMAGE

      - name: Run tests
        run: |
          docker build --cache-from $IMAGE --target lanelet2_deps -t lanelet2_deps .
          docker run -dit --name lanelet2 -v `pwd`:/home/developer/workspace/src/lanelet2 --rm lanelet2_deps bash
          docker exec -ti lanelet2 /bin/bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && catkin build --no-status"
          docker exec -ti lanelet2 catkin build --catkin-make-args run_tests -- --no-status
          docker exec -ti lanelet2 /bin/bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && catkin_test_results --verbose"
          docker stop lanelet2
  # Push image to GitHub Package Registry
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v1

      - name: Pull old image
        continue-on-error: true
        run: docker pull $IMAGE
        
      - name: Build image
        run: docker build --cache-from $IMAGE -t $IMAGE .
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE=$IMAGE
          echo VERSION=$VERSION
          docker tag $IMAGE $IMAGE:$VERSION
          docker push $IMAGE:$VERSION
